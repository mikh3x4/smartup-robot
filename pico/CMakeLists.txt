
cmake_minimum_required(VERSION 3.13)

# initialize the SDK based on PICO_SDK_PATH
# note: this must happen before project()
include(pico_sdk_import.cmake)

set(PICO_BOARD pico_w)

project(my_project)

# initialize the Raspberry Pi Pico SDK
pico_sdk_init()

# rest of your project


# add_executable(hello_world
#     hello_world.c
# )
#
# # Add pico_stdlib library which aggregates commonly used features
# target_link_libraries(hello_world pico_stdlib)
#
# # create map/bin/hex/uf2 file in addition to ELF.
# pico_add_extra_outputs(hello_world)

####################

add_executable(my_proj
        main.cpp
        )

# pull in common dependencies
# target_link_libraries(my_proj pico_stdlib)

# enable usb output, disable uart output
pico_enable_stdio_usb(my_proj 1)
pico_enable_stdio_uart(my_proj 0)


set(WIFI_SSID $ENV{WIFI_SSID})
set(WIFI_PASSWORD $ENV{WIFI_PASSWORD})

target_compile_definitions(my_proj PRIVATE
        WIFI_SSID=\"${WIFI_SSID}\"
        WIFI_PASSWORD=\"${WIFI_PASSWORD}\"
        )

target_include_directories(my_proj PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}
        )
target_link_libraries(my_proj
        pico_cyw43_arch_lwip_threadsafe_background
        pico_stdlib
        pico_multicore
        )

# create map/bin/hex/uf2 file etc.
pico_add_extra_outputs(my_proj)


